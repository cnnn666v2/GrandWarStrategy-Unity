### YamlMime:ManagedReference
items:
- uid: Global.War
  commentId: T:Global.War
  id: War
  parent: Global
  children:
  - Global.War.#ctor(System.String,List{System.String},List{System.String})
  - Global.War.defenders
  - Global.War.name
  - Global.War.offenders
  langs:
  - csharp
  - vb
  name: War
  nameWithType: War
  fullName: War
  type: Class
  source:
    id: War
    path: ''
    startLine: 1001
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: >-
      [Serializable]

      public class War
    content.vb: >-
      <Serializable>

      Public Class War
  inheritance:
  - System.Object
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
- uid: Global.War.name
  commentId: F:Global.War.name
  id: name
  parent: Global.War
  langs:
  - csharp
  - vb
  name: name
  nameWithType: War.name
  fullName: War.name
  type: Field
  source:
    id: name
    path: ''
    startLine: 1004
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: public string name
    return:
      type: System.String
    content.vb: Public name As String
- uid: Global.War.offenders
  commentId: F:Global.War.offenders
  id: offenders
  parent: Global.War
  langs:
  - csharp
  - vb
  name: offenders
  nameWithType: War.offenders
  fullName: War.offenders
  type: Field
  source:
    id: offenders
    path: ''
    startLine: 1005
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: public List<string> offenders
    return:
      type: Global.List{System.String}
    content.vb: Public offenders As List(Of String)
- uid: Global.War.defenders
  commentId: F:Global.War.defenders
  id: defenders
  parent: Global.War
  langs:
  - csharp
  - vb
  name: defenders
  nameWithType: War.defenders
  fullName: War.defenders
  type: Field
  source:
    id: defenders
    path: ''
    startLine: 1006
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: public List<string> defenders
    return:
      type: Global.List{System.String}
    content.vb: Public defenders As List(Of String)
- uid: Global.War.#ctor(System.String,List{System.String},List{System.String})
  commentId: M:Global.War.#ctor(System.String,List{System.String},List{System.String})
  id: '#ctor(System.String,List{System.String},List{System.String})'
  parent: Global.War
  langs:
  - csharp
  - vb
  name: War(string, List<string>, List<string>)
  nameWithType: War.War(string, List<string>, List<string>)
  fullName: War.War(string, List<string>, List<string>)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 1008
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: public War(string name, List<string> offenders, List<string> defenders)
    parameters:
    - id: name
      type: System.String
    - id: offenders
      type: Global.List{System.String}
    - id: defenders
      type: Global.List{System.String}
    content.vb: Public Sub New(name As String, offenders As List(Of String), defenders As List(Of String))
  overload: Global.War.#ctor*
  nameWithType.vb: War.New(String, List(Of String), List(Of String))
  fullName.vb: War.New(String, List(Of String), List(Of String))
  name.vb: New(String, List(Of String), List(Of String))
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.List{System.String}
  commentId: '!:Global.List{System.String}'
  definition: Global.List`1
  name: List<string>
  nameWithType: List<string>
  fullName: List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: Global.War.#ctor*
  commentId: Overload:Global.War.#ctor
  name: War
  nameWithType: War.War
  fullName: War.War
  nameWithType.vb: War.New
  fullName.vb: War.New
  name.vb: New
